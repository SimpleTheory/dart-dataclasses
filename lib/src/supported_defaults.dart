import 'package:dataclasses/dataclasses.dart';

List<SupportedDefaults> supportedDefaults = [
  SupportedDefaults(
      name: 'int',
      referenceType: ReflectedType.create(int, 'int'),
      getters: [
        Getter.create(ReflectedType.create(bool, 'bool'), 'isEven', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isOdd', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'bitLength', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'sign', false, false)
      ],
      methods: [
        Method.create('fromEnvironment', ReflectedType.create(int, 'int'), MethodType.factory, false, null, true, int.fromEnvironment),
        Method.create('&', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('|', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('^', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('~', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('<<', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('>>', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('>>>', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('modPow', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('modInverse', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('gcd', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('toUnsigned', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('toSigned', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('-', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('abs', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('round', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('floor', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('ceil', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('truncate', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('roundToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('floorToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('ceilToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('truncateToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('toString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('toRadixString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('parse', ReflectedType.create(int, 'int'), MethodType.normal, true, null, true, int.parse),
        Method.create('tryParse', ReflectedType.create(int, 'int?'), MethodType.normal, true, null, true, int.tryParse)
      ],
      parent: num
  ), // int
  SupportedDefaults(
      name: 'String',
      referenceType: ReflectedType.create(String, 'String'),
      getters: [
        Getter.create(ReflectedType.create(int, 'int'), 'length', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'hashCode', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isEmpty', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isNotEmpty', false, false),
        Getter.create(ReflectedType.create(List, 'List<int>'), 'codeUnits', false, false),
        Getter.create(ReflectedType.create(Runes, 'Runes'), 'runes', false, false)
      ],
      methods: [
        Method.create('fromCharCodes', ReflectedType.create(String, 'String'), MethodType.factory, false, null, true, String.fromCharCodes),
        Method.create('fromCharCode', ReflectedType.create(String, 'String'), MethodType.factory, false, null, true, String.fromCharCode),
        Method.create('fromEnvironment', ReflectedType.create(String, 'String'), MethodType.factory, false, null, true, String.fromEnvironment),
        Method.create('[]', ReflectedType.create(String, 'String'), MethodType.operator, false, null, false, null),
        Method.create('codeUnitAt', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('==', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('compareTo', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('endsWith', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, false, null),
        Method.create('startsWith', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, false, null),
        Method.create('indexOf', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('lastIndexOf', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('+', ReflectedType.create(String, 'String'), MethodType.operator, false, null, false, null),
        Method.create('substring', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('trim', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('trimLeft', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('trimRight', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('*', ReflectedType.create(String, 'String'), MethodType.operator, false, null, false, null),
        Method.create('padLeft', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('padRight', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('contains', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, false, null),
        Method.create('replaceFirst', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('replaceFirstMapped', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('replaceAll', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('replaceAllMapped', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('replaceRange', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('split', ReflectedType.create(List, 'List<String>'), MethodType.normal, false, null, false, null),
        Method.create('splitMapJoin', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('toLowerCase', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('toUpperCase', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null)
      ],
      parent: null
  ), // String
  SupportedDefaults(
      name: 'num',
      referenceType: ReflectedType.create(num, 'num'),
      getters: [
        Getter.create(ReflectedType.create(int, 'int'), 'hashCode', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isNaN', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isNegative', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isInfinite', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isFinite', false, false),
        Getter.create(ReflectedType.create(num, 'num'), 'sign', false, false)
      ],
      methods: [
        Method.create('==', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('compareTo', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('+', ReflectedType.create(num, 'num'), MethodType.operator, false, null, false, null),
        Method.create('-', ReflectedType.create(num, 'num'), MethodType.operator, false, null, false, null),
        Method.create('*', ReflectedType.create(num, 'num'), MethodType.operator, false, null, false, null),
        Method.create('%', ReflectedType.create(num, 'num'), MethodType.operator, false, null, false, null),
        Method.create('/', ReflectedType.create(double, 'double'), MethodType.operator, false, null, false, null),
        Method.create('~/', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
        Method.create('-', ReflectedType.create(num, 'num'), MethodType.operator, false, null, false, null),
        Method.create('remainder', ReflectedType.create(num, 'num'), MethodType.normal, false, null, false, null),
        Method.create('<', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('<=', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('>', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('>=', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('abs', ReflectedType.create(num, 'num'), MethodType.normal, false, null, false, null),
        Method.create('round', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('floor', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('ceil', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('truncate', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('roundToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('floorToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('ceilToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('truncateToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('clamp', ReflectedType.create(num, 'num'), MethodType.normal, false, null, false, null),
        Method.create('toInt', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('toDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('toStringAsFixed', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('toStringAsExponential', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('toStringAsPrecision', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('toString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('parse', ReflectedType.create(num, 'num'), MethodType.normal, true, null, false, num.parse),
        Method.create('tryParse', ReflectedType.create(num, 'num?'), MethodType.normal, true, null, false, num.tryParse)
      ],
      parent: null
  ), // num
  SupportedDefaults(
      name: 'double',
		referenceType: ReflectedType.create(double, 'double'),
		attributes: [
			Attribute.create('nan', ReflectedType.create(double, 'double'), false, true, true, false, false, double.nan,),
			Attribute.create('infinity', ReflectedType.create(double, 'double'), false, true, true, false, false, double.infinity,),
			Attribute.create('negativeInfinity', ReflectedType.create(double, 'double'), false, true, true, false, false, double.negativeInfinity,),
			Attribute.create('minPositive', ReflectedType.create(double, 'double'), false, true, true, false, false, double.minPositive,),
			Attribute.create('maxFinite', ReflectedType.create(double, 'double'), false, true, true, false, false, double.maxFinite),
		],
		getters: [
			Getter.create(ReflectedType.create(double, 'double'), 'sign', false, false)
		],
		methods: [
			Method.create('remainder', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
			Method.create('+', ReflectedType.create(double, 'double'), MethodType.operator, false, null, false, null),
			Method.create('-', ReflectedType.create(double, 'double'), MethodType.operator, false, null, false, null),
			Method.create('*', ReflectedType.create(double, 'double'), MethodType.operator, false, null, false, null),
			Method.create('%', ReflectedType.create(double, 'double'), MethodType.operator, false, null, false, null),
			Method.create('/', ReflectedType.create(double, 'double'), MethodType.operator, false, null, false, null),
			Method.create('~/', ReflectedType.create(int, 'int'), MethodType.operator, false, null, false, null),
			Method.create('-', ReflectedType.create(double, 'double'), MethodType.operator, false, null, false, null),
			Method.create('abs', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
			Method.create('round', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
			Method.create('floor', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
			Method.create('ceil', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
			Method.create('truncate', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
			Method.create('roundToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
			Method.create('floorToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
			Method.create('ceilToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
			Method.create('truncateToDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
			Method.create('toString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
			Method.create('parse', ReflectedType.create(double, 'double'), MethodType.normal, true, null, true, double.parse),
			Method.create('tryParse', ReflectedType.create(double, 'double?'), MethodType.normal, true, null, true, double.tryParse)
		],
		parent: num
  ), // double
  SupportedDefaults(
      name: 'bool',
      referenceType: ReflectedType.create(bool, 'bool'),
      getters: [
        Getter.create(ReflectedType.create(int, 'int'), 'hashCode', true, false)
      ],
      methods: [
        Method.create('fromEnvironment', ReflectedType.create(bool, 'bool'), MethodType.factory, false, null, true, bool.fromEnvironment),
        Method.create('hasEnvironment', ReflectedType.create(bool, 'bool'), MethodType.factory, false, null, true, bool.hasEnvironment),
        Method.create('&', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('|', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('^', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('toString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null)
      ],
      parent: null
  ), // bool
  SupportedDefaults(
      name: 'List',
      referenceType: ReflectedType.create(List, 'List'),
      getters: [
        Getter.create(ReflectedType.create(int, 'int'), 'length;', false, false),
        Getter.create(ReflectedType.create(Iterable, 'Iterable<E>'), 'reversed;', false, false)
      ],
      methods: [
        Method.create('filled', ReflectedType.create(List, 'List'), MethodType.factory, false, null, true, List.filled),
        Method.create('empty', ReflectedType.create(List, 'List'), MethodType.factory, false, null, true, List.empty),
        Method.create('from', ReflectedType.create(List, 'List'), MethodType.factory, false, null, true, List.from),
        Method.create('of', ReflectedType.create(List, 'List'), MethodType.factory, false, null, true, List.of),
        Method.create('generate', ReflectedType.create(List, 'List'), MethodType.factory, false, null, true, List.generate),
        Method.create('unmodifiable', ReflectedType.create(List, 'List'), MethodType.factory, false, null, true, List.unmodifiable),
        Method.create('castFrom', ReflectedType.create(List, 'List<T>'), MethodType.normal, true, '<S, T>', false, List.castFrom),
        Method.create('copyRange', ReflectedType.create(null, 'void'), MethodType.normal, true, '<T>', false, List.copyRange),
        Method.create('writeIterable', ReflectedType.create(null, 'void'), MethodType.normal, true, '<T>', false, List.writeIterable),
        Method.create('cast', ReflectedType.create(List, 'List'), MethodType.normal, false, '<R>', false, null),
        Method.create('[]', ReflectedType.create(null, 'E'), MethodType.operator, false, null, false, null),
        Method.create('[]=', ReflectedType.create(null, 'void'), MethodType.operator, false, null, false, null),
        Method.create('set', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('set', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('length', ReflectedType.create(null, 'void'), MethodType.setter, false, null, false, null),
        Method.create('add', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('addAll', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('sort', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('shuffle', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('indexOf', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('indexWhere', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('lastIndexWhere', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('lastIndexOf', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('clear', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('insert', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('insertAll', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('setAll', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('remove', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, false, null),
        Method.create('removeAt', ReflectedType.create(null, 'E'), MethodType.normal, false, null, false, null),
        Method.create('removeLast', ReflectedType.create(null, 'E'), MethodType.normal, false, null, false, null),
        Method.create('removeWhere', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('retainWhere', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('+', ReflectedType.create(List, 'List<E>'), MethodType.operator, false, null, false, null),
        Method.create('sublist', ReflectedType.create(List, 'List<E>'), MethodType.normal, false, null, false, null),
        Method.create('getRange', ReflectedType.create(Iterable, 'Iterable<E>'), MethodType.normal, false, null, false, null),
        Method.create('setRange', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('removeRange', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('fillRange', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('replaceRange', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
        Method.create('asMap', ReflectedType.create(Map, 'Map<int, E>'), MethodType.normal, false, null, false, null),
        Method.create('==', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),]
  ), // List
  SupportedDefaults(
    name: 'Map',
    referenceType: ReflectedType.create(Map, 'Map'),
    getters: [
      Getter.create(ReflectedType.create(Iterable, 'Iterable<MapEntry<K, V>>'), 'entries;', false, false),
      Getter.create(ReflectedType.create(Iterable, 'Iterable<K>'), 'keys;', false, false),
      Getter.create(ReflectedType.create(Iterable, 'Iterable<V>'), 'values;', false, false),
      Getter.create(ReflectedType.create(int, 'int'), 'length;', false, false),
      Getter.create(ReflectedType.create(bool, 'bool'), 'isEmpty;', false, false),
      Getter.create(ReflectedType.create(bool, 'bool'), 'isNotEmpty;', false, false)
    ],
    methods: [
      Method.create('from', ReflectedType.create(Map, 'Map'), MethodType.factory, false, null, false, Map.from),
      Method.create('of', ReflectedType.create(Map, 'Map'), MethodType.factory, false, null, false, Map.of),
      Method.create('unmodifiable', ReflectedType.create(Map, 'Map'), MethodType.factory, false, null, true, Map.unmodifiable),
      Method.create('identity', ReflectedType.create(Map, 'Map'), MethodType.factory, false, null, false, Map.identity),
      Method.create('fromIterable', ReflectedType.create(Map, 'Map'), MethodType.factory, false, null, false, Map.fromIterable),
      Method.create('fromIterables', ReflectedType.create(Map, 'Map'), MethodType.factory, false, null, false, Map.fromIterables),
      Method.create('castFrom', ReflectedType.create(Map, 'Map<K2, V2>'), MethodType.normal, true, '<K, V, K2, V2>', false, Map.castFrom),
      Method.create('fromEntries', ReflectedType.create(Map, 'Map'), MethodType.factory, false, null, false, Map.fromEntries),
      Method.create('..addEntries', ReflectedType.create(dynamic, 'dynamic'), MethodType.normal, false, null, false, null),
      Method.create('cast', ReflectedType.create(Map, 'Map'), MethodType.normal, false, '<RK, RV>', false, null),
      Method.create('containsValue', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, false, null),
      Method.create('containsKey', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, false, null),
      Method.create('[]', ReflectedType.create(null, 'V?'), MethodType.operator, false, null, false, null),
      Method.create('[]=', ReflectedType.create(null, 'void'), MethodType.operator, false, null, false, null),
      Method.create('map', ReflectedType.create(Map, 'Map'), MethodType.normal, false, '<K2, V2>', false, null),
      Method.create('addEntries', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
      Method.create('update', ReflectedType.create(null, 'V'), MethodType.normal, false, null, false, null),
      Method.create('updateAll', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
      Method.create('removeWhere', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
      Method.create('putIfAbsent', ReflectedType.create(null, 'V'), MethodType.normal, false, null, false, null),
      Method.create('addAll', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
      Method.create('remove', ReflectedType.create(null, 'V?'), MethodType.normal, false, null, false, null),
      Method.create('clear', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null),
      Method.create('forEach', ReflectedType.create(null, 'void'), MethodType.normal, false, null, false, null)
    ],
  ), // Map
  SupportedDefaults(
      name: 'DateTime',
      referenceType: ReflectedType.create(DateTime, 'DateTime'),
      getters: [
        Getter.create(ReflectedType.create(int, 'int'), 'hashCode', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'millisecondsSinceEpoch;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'microsecondsSinceEpoch;', true, false),
        Getter.create(ReflectedType.create(String, 'String'), 'timeZoneName;', true, false),
        Getter.create(ReflectedType.create(Duration, 'Duration'), 'timeZoneOffset;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'year;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'month;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'day;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'hour;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'minute;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'second;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'millisecond;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'microsecond;', true, false),
        Getter.create(ReflectedType.create(int, 'int'), 'weekday;', true, false)
],
      attributes: [
        Attribute.create('monday', ReflectedType.create(int, 'int'), false, true, true, false, false, 1),
        Attribute.create('tuesday', ReflectedType.create(int, 'int'), false, true, true, false, false, 2),
        Attribute.create('wednesday', ReflectedType.create(int, 'int'), false, true, true, false, false, 3),
        Attribute.create('thursday', ReflectedType.create(int, 'int'), false, true, true, false, false, 4),
        Attribute.create('friday', ReflectedType.create(int, 'int'), false, true, true, false, false, 5),
        Attribute.create('saturday', ReflectedType.create(int, 'int'), false, true, true, false, false, 6),
        Attribute.create('sunday', ReflectedType.create(int, 'int'), false, true, true, false, false, 7),
        Attribute.create('daysPerWeek', ReflectedType.create(int, 'int'), false, true, true, false, false, 7),
        Attribute.create('january', ReflectedType.create(int, 'int'), false, true, true, false, false, 1),
        Attribute.create('february', ReflectedType.create(int, 'int'), false, true, true, false, false, 2),
        Attribute.create('march', ReflectedType.create(int, 'int'), false, true, true, false, false, 3),
        Attribute.create('april', ReflectedType.create(int, 'int'), false, true, true, false, false, 4),
        Attribute.create('may', ReflectedType.create(int, 'int'), false, true, true, false, false, 5),
        Attribute.create('june', ReflectedType.create(int, 'int'), false, true, true, false, false, 6),
        Attribute.create('july', ReflectedType.create(int, 'int'), false, true, true, false, false, 7),
        Attribute.create('august', ReflectedType.create(int, 'int'), false, true, true, false, false, 8),
        Attribute.create('september', ReflectedType.create(int, 'int'), false, true, true, false, false, 9),
        Attribute.create('october', ReflectedType.create(int, 'int'), false, true, true, false, false, 10),
        Attribute.create('november', ReflectedType.create(int, 'int'), false, true, true, false, false, 11),
        Attribute.create('december', ReflectedType.create(int, 'int'), false, true, true, false, false, 12),
        Attribute.create('monthsPerYear', ReflectedType.create(int, 'int'), false, true, true, false, false, 12),
        Attribute.create('_value', ReflectedType.create(int, 'int'), true, false, false, false, false, null),
        Attribute.create('isUtc', ReflectedType.create(bool, 'bool'), true, false, false, false, false, null),
        Attribute.create('_maxMillisecondsSinceEpoch', ReflectedType.create(int, 'int'), false, true, true, false, false, 8640000000000000)
      ],
      methods: [
        Method(name: 'fromMap', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(DateTime, 'DateTime'), referencedMethod: DateTimeJson.fromMap),
        Method(name: 'fromJson', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(DateTime, 'DateTime'), referencedMethod: DateTimeJson.fromJson),
        Method(name: 'staticConstructor', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(DateTime, 'DateTime'), referencedMethod: DateTimeJson.staticConstructor),
        Method(name: 'toJson', methodType: MethodType.normal, returnType: ReflectedType.create(String, 'String'), static_: false, external_: false),
        Method(name: 'toMap', methodType: MethodType.normal, returnType: ReflectedType.create(Map, 'Map'), static_: false, external_: false),
        Method.create('DateTime', ReflectedType.create(DateTime, 'DateTime'), MethodType.constructor, false, null, false, null),
        Method.create('utc', ReflectedType.create(DateTime, 'DateTime'), MethodType.namedConstructor, false, null, false, DateTime.utc),
        Method.create('now', ReflectedType.create(DateTime, 'DateTime'), MethodType.namedConstructor, false, null, false, DateTime.now),
        Method.create('parse', ReflectedType.create(DateTime, 'DateTime'), MethodType.normal, true, null, false, DateTime.parse),
        Method.create('tryParse', ReflectedType.create(DateTime, 'DateTime?'), MethodType.normal, true, null, false, DateTime.tryParse),
        Method.create('fromMillisecondsSinceEpoch', ReflectedType.create(DateTime, 'DateTime'), MethodType.namedConstructor, false, null, true, DateTime.fromMillisecondsSinceEpoch),
        Method.create('fromMicrosecondsSinceEpoch', ReflectedType.create(DateTime, 'DateTime'), MethodType.namedConstructor, false, null, true, DateTime.fromMicrosecondsSinceEpoch),
        Method.create('_withValue', ReflectedType.create(DateTime, 'DateTime'), MethodType.namedConstructor, false, null, false, null),
        Method.create('==', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, true, null),
        Method.create('isBefore', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, true, null),
        Method.create('isAfter', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, true, null),
        Method.create('isAtSameMomentAs', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, true, null),
        Method.create('compareTo', ReflectedType.create(int, 'int'), MethodType.normal, false, null, true, null),
        Method.create('toLocal', ReflectedType.create(DateTime, 'DateTime'), MethodType.normal, false, null, false, null),
        Method.create('toUtc', ReflectedType.create(DateTime, 'DateTime'), MethodType.normal, false, null, false, null),
        Method.create('_fourDigits', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, null),
        Method.create('_sixDigits', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, null),
        Method.create('_threeDigits', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, null),
        Method.create('_twoDigits', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, null),
        Method.create('toString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('toIso8601String', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('add', ReflectedType.create(DateTime, 'DateTime'), MethodType.normal, false, null, true, null),
        Method.create('subtract', ReflectedType.create(DateTime, 'DateTime'), MethodType.normal, false, null, true, null),
        Method.create('difference', ReflectedType.create(Duration, 'Duration'), MethodType.normal, false, null, true, null),
        Method.create('_internal', ReflectedType.create(DateTime, 'DateTime'), MethodType.namedConstructor, false, null, true, null),
        Method.create('_now', ReflectedType.create(DateTime, 'DateTime'), MethodType.namedConstructor, false, null, true, null),
        Method.create('_brokenDownDateToValue', ReflectedType.create(int, 'int?'), MethodType.normal, true, null, true, null),
        Method.create('_parseFormat', ReflectedType.create(RegExp, 'RegExp'), MethodType.normal, true, null, false, null)
      ],
  ), // DateTime -
  SupportedDefaults(
      name: 'RegExp',
      referenceType: ReflectedType.create(RegExp, 'RegExp'),
      getters: [
        Getter.create(ReflectedType.create(String, 'String'), 'pattern;', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isMultiLine;', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isCaseSensitive;', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isUnicode;', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isDotAll;', false, false)
      ],
      methods: [
        Method(name: 'fromMap', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(RegExp, 'RegExp'), referencedMethod: RegExpJson.fromMap),
        Method(name: 'fromJson', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(RegExp, 'RegExp'), referencedMethod: RegExpJson.fromJson),
        Method(name: 'staticConstructor', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(RegExp, 'RegExp'), referencedMethod: RegExpJson.staticConstructor),
        Method(name: 'toJson', methodType: MethodType.normal, returnType: ReflectedType.create(String, 'String'), static_: false, external_: false),
        Method(name: 'toMap', methodType: MethodType.normal, returnType: ReflectedType.create(Map, 'Map'), static_: false, external_: false),
        Method.create('RegExp', ReflectedType.create(RegExp, 'RegExp'), MethodType.constructor, false, null, true, null),
        Method.create('escape', ReflectedType.create(String, 'String'), MethodType.normal, true, null, true, RegExp.escape),
        Method.create('firstMatch', ReflectedType.create(RegExpMatch, 'RegExpMatch?'), MethodType.normal, false, null, false, null),
        Method.create('allMatches', ReflectedType.create(Iterable, 'Iterable<RegExpMatch>'), MethodType.normal, false, null, false, null),
        Method.create('hasMatch', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, false, null),
        Method.create('stringMatch', ReflectedType.create(String, 'String?'), MethodType.normal, false, null, false, null)
      ],
  ), // Regexp -
  SupportedDefaults(
      name: 'Duration',
      referenceType: ReflectedType.create(Duration, 'Duration'),
      attributes: [
        Attribute.create('microsecondsPerMillisecond', ReflectedType.create(int, 'int'), false, true, true, false, false, 1000),
        Attribute.create('millisecondsPerSecond', ReflectedType.create(int, 'int'), false, true, true, false, false, 1000),
        Attribute.create('secondsPerMinute', ReflectedType.create(int, 'int'), false, true, true, false, false, 60),
        Attribute.create('minutesPerHour', ReflectedType.create(int, 'int'), false, true, true, false, false, 60),
        Attribute.create('hoursPerDay', ReflectedType.create(int, 'int'), false, true, true, false, false, 24),
        Attribute.create('microsecondsPerSecond', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.microsecondsPerMillisecond * Duration.millisecondsPerSecond),
        Attribute.create('microsecondsPerMinute', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.microsecondsPerSecond * Duration.secondsPerMinute),
        Attribute.create('microsecondsPerHour', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.microsecondsPerMinute * Duration.minutesPerHour),
        Attribute.create('microsecondsPerDay', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.microsecondsPerHour * Duration.hoursPerDay),
        Attribute.create('millisecondsPerMinute', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.millisecondsPerSecond * Duration.secondsPerMinute),
        Attribute.create('millisecondsPerHour', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.millisecondsPerMinute * Duration.minutesPerHour),
        Attribute.create('millisecondsPerDay', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.millisecondsPerHour * Duration.hoursPerDay),
        Attribute.create('secondsPerHour', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.secondsPerMinute * Duration.minutesPerHour),
        Attribute.create('secondsPerDay', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.secondsPerHour * Duration.hoursPerDay),
        Attribute.create('minutesPerDay', ReflectedType.create(int, 'int'), false, true, true, false, false, Duration.minutesPerHour * Duration.hoursPerDay),
        Attribute.create('zero', ReflectedType.create(Duration, 'Duration'), false, false, false, true, true, Duration.zero),
        Attribute.create('_duration', ReflectedType.create(int, 'int'), true, false, false, false, false, null)
      ],
      getters: [
        Getter.create(ReflectedType.create(int, 'int'), 'inDays', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'inHours', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'inMinutes', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'inSeconds', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'inMilliseconds', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'inMicroseconds', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'hashCode', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isNegative', false, false)
      ],
      methods: [
        Method(name: 'fromMap', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(Duration, 'Duration'), referencedMethod: DurationJson.fromMap),
        Method(name: 'fromJson', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(Duration, 'Duration'), referencedMethod: DurationJson.fromJson),
        Method(name: 'staticConstructor', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(Duration, 'Duration'), referencedMethod: DurationJson.staticConstructor),
        Method(name: 'toJson', methodType: MethodType.normal, returnType: ReflectedType.create(String, 'String'), static_: false, external_: false),
        Method(name: 'toMap', methodType: MethodType.normal, returnType: ReflectedType.create(Map, 'Map'), static_: false, external_: false),
        Method.create('Duration', ReflectedType.create(Duration, 'Duration'), MethodType.constructor, false, null, false, null),
        Method.create('_microseconds', ReflectedType.create(Duration, 'Duration'), MethodType.namedConstructor, false, null, false, null),
        Method.create('+', ReflectedType.create(Duration, 'Duration'), MethodType.operator, false, null, false, null),
        Method.create('-', ReflectedType.create(Duration, 'Duration'), MethodType.operator, false, null, false, null),
        Method.create('*', ReflectedType.create(Duration, 'Duration'), MethodType.operator, false, null, false, null),
        Method.create('~/', ReflectedType.create(Duration, 'Duration'), MethodType.operator, false, null, false, null),
        Method.create('<', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('>', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('<=', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('>=', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('==', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('compareTo', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('toString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('abs', ReflectedType.create(Duration, 'Duration'), MethodType.normal, false, null, false, null),
        Method.create('-', ReflectedType.create(Duration, 'Duration'), MethodType.operator, false, null, false, null)
      ],
  ), // Duration -
  SupportedDefaults(
      name: 'BigInt',
      referenceType: ReflectedType.create(BigInt, 'BigInt'),
      getters: [
        Getter.create(ReflectedType.create(BigInt, 'BigInt'), 'zero', true, true, BigInt.zero),
        Getter.create(ReflectedType.create(BigInt, 'BigInt'), 'one', true, true, BigInt.one),
        Getter.create(ReflectedType.create(BigInt, 'BigInt'), 'two', true, true, BigInt.two),
        Getter.create(ReflectedType.create(int, 'int'), 'bitLength', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'sign', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isEven', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isOdd', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isNegative', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isValidInt', false, false)
      ],
      methods: [
        Method(name: 'fromMap', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(BigInt, 'BigInt'), referencedMethod: BigIntJson.fromMap),
        Method(name: 'fromJson', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(BigInt, 'BigInt'), referencedMethod: BigIntJson.fromJson),
        Method(name: 'toJson', methodType: MethodType.normal, returnType: ReflectedType.create(String, 'String'), static_: false, external_: false),
        Method(name: 'toMap', methodType: MethodType.normal, returnType: ReflectedType.create(Map, 'Map'), static_: false, external_: false),
        Method.create('parse', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, true, null, true, BigInt.parse),
        Method.create('tryParse', ReflectedType.create(BigInt, 'BigInt?'), MethodType.normal, true, null, true, BigInt.tryParse),
        Method.create('from', ReflectedType.create(BigInt, 'BigInt'), MethodType.factory, false, null, true, BigInt.from),
        Method.create('abs', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, false, null, false, null),
        Method.create('-', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('+', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('-', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('*', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('/', ReflectedType.create(double, 'double'), MethodType.operator, false, null, false, null),
        Method.create('~/', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('%', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('remainder', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, false, null, false, null),
        Method.create('<<', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('>>', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('&', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('|', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('^', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('~', ReflectedType.create(BigInt, 'BigInt'), MethodType.operator, false, null, false, null),
        Method.create('<', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('<=', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('>', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('>=', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('compareTo', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('pow', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, false, null, false, null),
        Method.create('modPow', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, false, null, false, null),
        Method.create('modInverse', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, false, null, false, null),
        Method.create('gcd', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, false, null, false, null),
        Method.create('toUnsigned', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, false, null, false, null),
        Method.create('toSigned', ReflectedType.create(BigInt, 'BigInt'), MethodType.normal, false, null, false, null),
        Method.create('toInt', ReflectedType.create(int, 'int'), MethodType.normal, false, null, false, null),
        Method.create('toDouble', ReflectedType.create(double, 'double'), MethodType.normal, false, null, false, null),
        Method.create('toString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('toRadixString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null)
      ],
  ), // BigInt -
  SupportedDefaults(
      name: 'Uri',
      referenceType: ReflectedType.create(Uri, 'Uri'),
      getters: [
        Getter.create(ReflectedType.create(Uri, 'Uri'), 'base', true, true, Uri.base),
        Getter.create(ReflectedType.create(String, 'String'), 'scheme', false, false),
        Getter.create(ReflectedType.create(String, 'String'), 'authority', false, false),
        Getter.create(ReflectedType.create(String, 'String'), 'userInfo', false, false),
        Getter.create(ReflectedType.create(String, 'String'), 'host', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'port', false, false),
        Getter.create(ReflectedType.create(String, 'String'), 'path', false, false),
        Getter.create(ReflectedType.create(String, 'String'), 'query', false, false),
        Getter.create(ReflectedType.create(String, 'String'), 'fragment', false, false),
        Getter.create(ReflectedType.create(List, 'List<String>'), 'pathSegments', false, false),
        Getter.create(ReflectedType.create(Map, 'Map<String, String>'), 'queryParameters', false, false),
        Getter.create(ReflectedType.create(Map, 'Map<String, List<String>>'), 'queryParametersAll', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'isAbsolute', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'hasScheme', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'hasAuthority', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'hasPort', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'hasQuery', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'hasFragment', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'hasEmptyPath', false, false),
        Getter.create(ReflectedType.create(bool, 'bool'), 'hasAbsolutePath', false, false),
        Getter.create(ReflectedType.create(String, 'String'), 'origin', false, false),
        Getter.create(ReflectedType.create(UriData, 'UriData?'), 'data', false, false),
        Getter.create(ReflectedType.create(int, 'int'), 'hashCode', false, false)
      ],
      methods: [
        Method(name: 'fromMap', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(Uri, 'Uri'), referencedMethod: UriJson.fromMap),
        Method(name: 'fromJson', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(Uri, 'Uri'), referencedMethod: UriJson.fromJson),
        Method(name: 'staticConstructor', methodType: MethodType.factory, static_: false, external_: false, returnType: ReflectedType.create(Uri, 'Uri'), referencedMethod: UriJson.staticConstructor),
        Method(name: 'toJson', methodType: MethodType.normal, returnType: ReflectedType.create(String, 'String'), static_: false, external_: false),
        Method(name: 'toMap', methodType: MethodType.normal, returnType: ReflectedType.create(Map, 'Map'), static_: false, external_: false),
        Method.create('Uri', ReflectedType.create(Uri, 'Uri'), MethodType.constructor, false, null, true, null),
        Method.create('http', ReflectedType.create(Uri, 'Uri'), MethodType.factory, false, null, false, Uri.http),
        Method.create('https', ReflectedType.create(Uri, 'Uri'), MethodType.factory, false, null, false, Uri.https),
        Method.create('file', ReflectedType.create(Uri, 'Uri'), MethodType.factory, false, null, false, Uri.file),
        Method.create('directory', ReflectedType.create(Uri, 'Uri'), MethodType.factory, false, null, false, Uri.directory),
        Method.create('dataFromString', ReflectedType.create(Uri, 'Uri'), MethodType.factory, false, null, false, Uri.dataFromString),
        Method.create('dataFromBytes', ReflectedType.create(Uri, 'Uri'), MethodType.factory, false, null, false, Uri.dataFromBytes),
        Method.create('isScheme', ReflectedType.create(bool, 'bool'), MethodType.normal, false, null, false, null),
        Method.create('toFilePath', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('==', ReflectedType.create(bool, 'bool'), MethodType.operator, false, null, false, null),
        Method.create('toString', ReflectedType.create(String, 'String'), MethodType.normal, false, null, false, null),
        Method.create('replace', ReflectedType.create(Uri, 'Uri'), MethodType.normal, false, null, false, null),
        Method.create('removeFragment', ReflectedType.create(Uri, 'Uri'), MethodType.normal, false, null, false, null),
        Method.create('resolve', ReflectedType.create(Uri, 'Uri'), MethodType.normal, false, null, false, null),
        Method.create('resolveUri', ReflectedType.create(Uri, 'Uri'), MethodType.normal, false, null, false, null),
        Method.create('normalizePath', ReflectedType.create(Uri, 'Uri'), MethodType.normal, false, null, false, null),
        Method.create('parse', ReflectedType.create(Uri, 'Uri'), MethodType.normal, true, null, false, Uri.parse),
        Method.create('tryParse', ReflectedType.create(Uri, 'Uri?'), MethodType.normal, true, null, false, Uri.tryParse),
        Method.create('encodeComponent', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, Uri.encodeComponent),
        Method.create('encodeQueryComponent', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, Uri.encodeQueryComponent),
        Method.create('decodeComponent', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, Uri.decodeComponent),
        Method.create('decodeQueryComponent', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, Uri.decodeQueryComponent),
        Method.create('encodeFull', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, Uri.encodeFull),
        Method.create('decodeFull', ReflectedType.create(String, 'String'), MethodType.normal, true, null, false, Uri.decodeFull),
        Method.create('splitQueryString', ReflectedType.create(Map, 'Map<String, String>'), MethodType.normal, true, null, false, Uri.splitQueryString),
        Method.create('parseIPv4Address', ReflectedType.create(List, 'List<int>'), MethodType.normal, true, null, false, Uri.parseIPv4Address),
        Method.create('_parseIPv4Address', ReflectedType.create(List, 'List<int>'), MethodType.normal, true, null, false, null),
        Method.create('parseIPv6Address', ReflectedType.create(List, 'List<int>'), MethodType.normal, true, null, false, Uri.parseIPv6Address)
      ],
  ), // URI
  // For non-collection types above add Extension methods manually!!
];
Map<String, SupportedDefaults> str2defaults = {for (SupportedDefaults o in supportedDefaults) o.name: o};
Map<Type, SupportedDefaults> type2defaults = {for (SupportedDefaults o in supportedDefaults) o.referenceType.referenceType!: o};

